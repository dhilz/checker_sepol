require('dotenv').config();
const readlineSync = require('readline-sync');
const figlet = require('figlet');
const gradient = require('gradient-string');
const ora = require('ora');
const fs = require('fs');
const path = require('path');

const checkEligibility = require('./src/modules/checkEligibility');
const checkUnclaimed = require('./src/modules/checkUnclaimed');
const extractData = require('./src/modules/extractData');
const prompSpliter = require('./src/modules/prompSpliter');
const removeDuplicate = require('./src/modules/removeDuplicate');
const createProof = require('./src/modules/createProof');
const extractSmart = require('./src/modules/extractSmart');
const bruteforceEligibility = require('./src/modules/bruteforceEligibility');
const convertMnemonic = require('./src/modules/convertMnemonic');
const getKeysFromGoogleSheet = require('./src/modules/getKey'); // ‚úÖ Get Key
const uploadResultsToSheet = require('./src/modules/uploadResult'); // ‚úÖ Upload Result
const { clearTerminal } = require('./src/utils/clearTerminal');

async function showMenu() {
  try {
    clearTerminal();

    console.log(
      gradient.pastel.multiline(
        figlet.textSync('Mr Dilz Scanner', {
          font: 'Standard',
          horizontalLayout: 'default',
          verticalLayout: 'default',
        })
      )
    );

    console.log("\n‚ú® Selamat datang di Checker Sepolia ‚ú®\n");

    // Elegant, clean menu design
    console.log("üìú Menu:");
    console.log("    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    console.log("    ‚ïë                        üîß Pilih Aksi                         ‚ïë");
    console.log("    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
    console.log("    ‚ïë 01 ‚ïë Check Eligibility                                       ‚ïë");
    console.log("    ‚ïë 02 ‚ïë Check Unclaimed                                         ‚ïë");
    console.log("    ‚ïë 03 ‚ïë Buat Proof Merkle                                       ‚ïë");
    console.log("    ‚ïë 04 ‚ïë Get Key dari Google Sheet                               ‚ïë");
    console.log("    ‚ïë 05 ‚ïë Upload Result ke Google Sheet                           ‚ïë");
    console.log("    ‚ïë 06 ‚ïë Extract Data                                            ‚ïë");
    console.log("    ‚ïë 07 ‚ïë Extract Smart Mnemonic/Private Key                      ‚ïë");
    console.log("    ‚ïë 08 ‚ïë Reset Konfigurasi (Hapus file result)                   ‚ïë");
    console.log("    ‚ïë 09 ‚ïë Split File Mnemonic / Private Key                       ‚ïë");
    console.log("    ‚ïë 10 ‚ïë Hapus Duplikat File                                     ‚ïë");
    console.log("    ‚ïë 11 ‚ïë Bruteforce Mnemonic / Private Key (Eligible Hunter)     ‚ïë");
    console.log("    ‚ïë 12 ‚ïë Convert Mnemonic ke Private Key                         ‚ïë");
    console.log("    ‚ïë 00 ‚ïë Keluar                                                  ‚ïë");
    console.log("    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

    const choice = readlineSync.question("üëâ Pilih opsi (0-12): ");

    const spinner = ora('Menyiapkan modul...').start();
    await new Promise(res => setTimeout(res, 1000));
    spinner.succeed('Modul siap!');

    switch (choice) {
      case '1':
        await checkEligibility();
        break;
      case '2':
        await checkUnclaimed();
        break;
      case '3':
        await createProof();
        break;
      case '4':
        await getKeysFromGoogleSheet(); // ‚úÖ Get Key
        break;
      case '5':
        await uploadResultsToSheet(); // ‚úÖ Upload Result
        break;
      case '6':
        await extractData();
        break;
      case '7': {
        const fileName = readlineSync.question('üìÇ Masukkan nama file input: ');
        const filePath = path.join(__dirname, fileName);
        extractSmart(filePath);
        break;
      }
      case '8':
        await resetConfiguration();
        break;
      case '9':
        await prompSpliter();
        break;
      case '10':
        await removeDuplicate();
        break;
      case '11':
        await bruteforceEligibility();
        break;
      case '12':
        await convertMnemonic();
        break;
      case '0':
        console.log("\nüëã Sampai jumpa! Terima kasih sudah menggunakan Mr Dilz Scanner!");
        process.exit();
        break;
      default:
        console.log("‚ùå Opsi tidak valid. Coba lagi ya!");
        break;
    }

    await showMenu();
  } catch (error) {
    console.error(`üî• Error: ${error.message}`);
    await showMenu();
  }
}

async function resetConfiguration() {
  try {
    const filesToDelete = [
      'result/result_eligibility.txt',
      'result/last_scan.txt',
      'result/error_check.txt',
      'result/result_claimed.txt',
      'result/proofs.txt'
    ];

    const spinner = ora('Menghapus file...').start();

    for (const file of filesToDelete) {
      const filePath = path.join(__dirname, file);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`‚úÖ File ${file} berhasil dihapus.`);
      } else {
        console.log(`‚ö†Ô∏è File ${file} tidak ditemukan.`);
      }
    }

    spinner.succeed('Konfigurasi berhasil direset!');
  } catch (error) {
    console.error(`‚ùå Gagal mereset konfigurasi: ${error.message}`);
  }
}

showMenu();
